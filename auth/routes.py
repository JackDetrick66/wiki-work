from flask import Blueprint, request, redirect, render_template, url_for, flash
from flask_login import login_user, logout_user, login_required
from db_models import User, db
from werkzeug.security import generate_password_hash, check_password_hash
from . import auth_bp


# Signup route (GET to display form, POST to submit form)
# This is what the URL_for resolves to for auth.signup
@auth_bp.route('/signup', methods=['GET', 'POST'])
def signup():
    #get data securely
    if request.method == 'POST':
        username = request.form['username']
        raw_password = request.form['password']

        # Check if the username already exists
        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            # this message will be retreived in the html
            flash("Username already taken.")
            return redirect(url_for('auth.signup'))
        
# securely store password if successfully creating a new user.
        hashed_password = generate_password_hash(raw_password)
        new_user = User(username=username, password_hash=hashed_password)
        try:
# add this user to the database
            db.session.add(new_user)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            flash("An error occurred. Please try again.", "danger")
            print("Error with commit to database:", e)
        

        flash('Signup successful!')
        return redirect(url_for('main.index'))
    # If GET, just send the html for signup
    return render_template('signup.html')


# login route (GET)
@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        user = User.query.filter_by(username=username).first()
# checks if the users password hash matches the password hash generated by the provided password,
# AFTER getting the user from the database
        if user and check_password_hash(user.password_hash, password):
            login_user(user)
            flash("Entry Logged", "success")
            return redirect(url_for('main.contentListing'))
        else:
            flash("Invalid Credentials.", "danger")
            return redirect(url_for('auth.login'))
        
    return render_template('login.html')
@auth_bp.route('/logout')
@login_required
def logout():
    logout_user()
    flash("You have successfully logged out.", "info")
    return redirect(url_for('main.index'))